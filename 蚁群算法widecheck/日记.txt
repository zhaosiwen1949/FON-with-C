总体思路呢就是一点一点地加一点一点地调，一次性弄完会出问题的~~
2013-5-6@@@@@@@@@@@@@@@@@@@@@@@
初步建立了几个需要的文件夹，虽然内容都不一样，但是有了框架就好做事了，调通了

2013-5-7@@@@@@@@@@@@@@@@@@@@@@@
=在昨日的基础上添加了client类的文件
=加载完毕Common类的文件，其中的坐标采用了最原始的X.Y型号，不要告诉小胡…
=将simulate从main函数中单个出来
>下一步：将client类先增加至需要的数量，然后给A_T和L_T赋值操作，在想要不要把simulate函数也整成一个类神马的，这样city文件会显得小巧一点。
&好开心啊，调通了simulate部分的时间设置，恩 哈哈哈
=将simulate中有关大把随机数产生泊松分布流的代码添加在了Data类文件中，这样city文件看起来小了些也不会有冲突了，下一步就是该把各自文件里的具体事情做完了，希望可以出来东西 哈哈
=main函数部分的a和文件列表输出也已经完成，下一步加油啦~！
>下一步：先按照一个业务的来弄，先不管有关最优信道的存储，先把最原始的蚁群算法实现。然后再网上加信道。
= 完成了channel类文件的组件调试，在里面加了一点，原来挑出空闲信道后就直接开始使用了，但是对空闲信道的初始化赋值为0容易与真实中的信道标号重复，就把他们改成了-1的初始值，另外，如果空闲信道数组nobusy内所有元素在搜寻后仍然都为-1，则表示无空闲，则直接返回channel的check=-1
=调试的时候出现了一个unexpected end of file found，其实是文件结尾处的花括号少了一个，好在平时标注的时候觉得特别多花括号时就标一个xx结束，所以很快就发现错误了，害我把update函数给拆了放进了check，好吧，一气呵成了，木有办法了，就这样的吧，下一步加油哦~
>下一步的计划：还是先封锁为一个业务，的一次蚁群算法，能够返回一个最有路径已经相应的信道值返回与更新，然后再考虑多业务

= 居然按时完成ant部分的编译了，虽然不保证跑程序对，但好似没有语法错误了，很开心，小胡来捣乱跟我讲什么那个孙子的博士论文，想从哪儿找到创新点，结果我胡说了一下他就突然又灵感了，呵呵，又得可怜我编程了。。。。。
>晚上回来接着编，再检查一下程序中的函数有没有返回值错误的，添加channel文件的函数部分内容，切记，现在的channel类很简单，先不考虑tsp和client中有关传值的问题。
>先添加各自的头文件中成员；
=按照自己原来四月份的版打了个框架，.h .cpp中的结构运行成功，没啥问题~
=封锁了CITY文件里调用蚁群算法，现在他只能先运行A_T等工作

20`3-5-8@@@@@@@@@@@@@@@@@@@@@@
>修改tsp.cpp中的函数，能够完成一次蚁群算法，tsp内嵌的bigchannel的初始化应该是全局只有一次的，所以可以另设一个函数用于在业务请求开始前就对bigchannel初始化一次，这样每次最优蚂蚁的占用信道时间更新到bigchannel中后就不动，在下次蚁群算法开始时再将更新后的bigchannel复制到small里供下一个业务的蚂蚁开始寻路空闲信道；
=写完了TSP部分的cpp，但是出现了一个问题，貌似不认我的二维数组形式的channel类类型，
>尝试写一个新函数定义一个二维类类型试试
&居然不是不认，是在tsp中用到了ant中的channel类，结果在ant里定义的channel类不是二维数组，所以老报错。。。tsp部分的cpp编译通过~！！鼓掌~
>今天下午任务，继续整理ant类的文件函数部分的填充；

2013-5-9@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=成功利用‘动态分配内存函数’解决了昨晚city类突然不好使还报错说内存分配不够的问题
>但是不知道为什么现在不能独立运行city出结果，这个让我感觉灰常匪夷所思，好吧，只好先继续编程了，好在是编译通过了嘛
= 删除了NBC文件后可以buil通过city文件，
>但是city在运行时报错！，好吧，上次这种情况出现的时候我干了什么来着？”0x004028cd“指令引用的“0x00000000”内存。该内存不能为“written”
=尝试了在编译通过后设置断点运行发现expression cannot be evaluated 貌似是说A-T没有初始化就用了。恩 应该初始化哈
=1，更改client中的init函数，实现对A_T L_T的初始化为0，将三个参量要求移到search里
=2，在city中声明client后就进行初始化；貌似对上个运行错误没有任何改善，先下一步吧~？？？？？？


>今日任务，分析tsp级及以下类，能够实现信道信息传递和更新；
=将tsp.c_init（）函数加入了client的init函数中，仅在开始时初始化一次，之后就是更新了。
=tsp.search中在进行完所有的ant搜索之后如果kill值为蚂蚁总数时，就表明搜寻失败，break出for循环返回值为1，表示一次block，原来是在哪儿rerun，但觉得break更好一些；
=若kill值不为全体蚂蚁数则可继续实现tsp内的Update和C_arrange函数分别更新信息素，将bestant的更新版信道占用时间赋给bigchannel里的L_T[]
=修改了c_arrange函数，原来不知道怎么想的居然是将所有蚂蚁信道信息更新进bigchannel，已经更改为bestant里的l-t 数组对bigchannel的LT数组的更新啦，以后就是个更新方法，别再想说能不能搬到bigchannel里去这样的奇怪想法了。
=channel.cpp里的东西也又收拾了一边，确认没啥问题了
&截止目前为止，各个单个的cpp文件能够过调试这关，但都没敢组建和运行，希望有运行的可能；
>先回去看看最初的蚁群算法是否能够实现单cpp文件的组建吧；


>修改city中，加入public channel，这个才是真正的公用信道，原先那个其他client调用不到。
>更改了city：加入类channel，生成public channel类，能够在每次获取阻塞率结束后更新一次信道信息，即从tsp中的bigchannel更新一次占用情况；这样下一次开始时就直接把public channel 复制到bigchannel里，用完之后再更新到public channel里。bigchannel的初始化应该早于public的赋值操作

晚上来把这个复杂的东西理一理，到底需要几个channel；
=修改city：
1.调用蚁群算法前先将public信道信息类的值赋给tsp里的bigchannel
2.计算每次蚁群算法的阻塞数时，如果没有阻塞，即返回阻塞数为0时，要及时更新bigchannel的信道离开时间给public channel
=修改tsp：
1.tsp.search（）中开始蚁群算法后，每个蚂蚁都在搜寻开始前获得bigchannel的赋值；
2013-5-12@@@@@@@@@@@@@@@@@@@@@
程序调通，组建通过，但是运行卡，在原始蚁群算法计算时没有出现这样的问题，但是当多次循环调用蚁群算法超过10次时就会出现同样的错误，估计还是内存或者我电脑的问题

2013-5-14@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
晴天大霹雳，突然就说要写会议论文，突然就说这周要跑出程序，突然就说晚上七点后要加班，俨然是做毕设的节奏啊，明天还有事，好吧，好在小胡说他也要开始编了，放心多了~我编不出来不是我的错了……
#已上传

>原本在channel类：city中一个public（复制，更新） tsp中一个Big(复制，初始化，更新) m个ant里各有Small（check，挑选best  返回更新给Big）  现在觉得有点多，而且重复地做赋值操作也费事，
1.不如像信息素一样设一个extern Channel Public_channel [][] 这样的变量，储存全局channel，放在city里
2.取消Big_channel 类，tsp中的ant直接将Public类的channel使用，但先不更新信道占用。&这个靠谱
3.在进行蚁群算法时要顺便记下每个城市走过后选择的信道标号，在bestant时将bestant走过的路径上的channel标号更新到Public的相应节点内。
= 在common。cpp.h中新增extern  Channel Public_channel[N_CITY_COUNT][N_CITY_COUNT]; 修改掉了city中对public的声明。编译通过
=相应取消bigchannel的存在性:city里的public-big的赋值与更新；client初始化init里的tsp.c_init，tsp里内嵌的bigchannel类；
>下一步，继续根除bigchannel，做好在ant里加成分的准备。 保存为“xxx 加channel函数版”
=在ant中加入m_nLink[N_CITY_COUNT]这个参数，用于标明对应于所选path标号的信道标号，首元素为0
=smallchannel可以保留，当用到哪个具体的路径上的smallchannel时，就调用这个以为的信道类，这样在执行smallchannel时，只做信道标号的标记，不更改L_T(在channel。check中删除了对信道L_T[k]的更新)
=在ant中定义int Channel_No;为经过channelcheck后找到的符合要求信道组合的首个信道标号，那么在最后的bestant时就结合Wide 就能一次性更新publicchannel相应部分的L_T
=ant的move函数形参调用错了，改了过来。
=更改TSP中的c_arrange()函数，使之能够根据最优蚂蚁的路径和信道选择更新publicchannel的占用情况
&程序更新版编译通过~！
#已上传









