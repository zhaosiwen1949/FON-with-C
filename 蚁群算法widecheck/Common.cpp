#include "common.h"


//两两城市间信息素
Channel Public_channel[N_CITY_COUNT][N_CITY_COUNT];
double g_Trial[N_CITY_COUNT][N_CITY_COUNT]; 
double g_Distance[N_CITY_COUNT][N_CITY_COUNT]={
		0,1,1,1,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,
		1,0,1,65535,65535,65535,65535,1,65535,65535,65535,65535,65535,65535,
		1,1,0,65535,65535,1,65535,65535,65535,65535,65535,65535,65535,65535,
		1,65535,65535,0,1,65535,65535,65535,1,65535,65535,65535,65535,65535,
		65535,65535,65535,1,0,1,1,65535,65535,65535,65535,65535,65535,65535,
		65535,65535,1,65535,1,0,65535,65535,65535,65535,1,65535,1,65535,
		65535,65535,65535,65535,1,65535,0,1,65535,65535,65535,65535,65535,65535,
		65535,1,65535,65535,65535,65535,1,0,65535,1,65535,65535,65535,65535,
		65535,65535,65535,1,65535,65535,65535,65535,0,65535,65535,1,65535,1,
		65535,65535,65535,65535,65535,65535,65535,1,65535,0,1,1,65535,1,
		65535,65535,65535,65535,65535,1,65535,65535,65535,1,0,65535,65535,65535,
		65535,65535,65535,65535,65535,65535,65535,65535,1,1,65535,0,1,65535,
		65535,65535,65535,65535,65535,1,65535,65535,65535,65535,65535,1,0,1,
		65535,65535,65535,65535,65535,65535,65535,65535,1,1,65535,65535,1,0
		
	};

//产生随机数
int rnd(int nLow,int nUpper)
{
	
	return nLow+(nUpper-nLow)*rand()/(RAND_MAX+1);

}
double rnd(double dbLow,double dbUpper)
{
	double dbTemp=rand()/((double)RAND_MAX+1.0);
	return dbLow+dbTemp*(dbUpper-dbLow);
}

//返回浮点数四舍五入取整后的浮点数
double ROUND(double dbA)
{
	return (double)((int)(dbA+0.5));
}

///   用途：产生----参数为x（1/lamta）的负指数分布随机数
///   输出： 以x 为参数的负指数分布随机数
double expntl(double x)
{
	double z;
	do{  
		z=((double)rand()/RAND_MAX);
      }while((z == 0)||(z == 1));
	return(-x*log(z));
}

